import telebot
from telebot import types
import io

TOKEN = "8434751648:AAHxdICxD01RUkv0LeS_LRbZI1B-zOxd4mo"
bot = telebot.TeleBot(TOKEN)

user_data = {}
moderators = []
waiting_for_receipt = {}

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    register_button = types.KeyboardButton("üìù –ö–æ–Ω–∫—É—Ä—Å")
    setting_button = types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    markup.add(register_button, setting_button)
    bot.send_message(
        message.chat.id,
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ö–æ–Ω–∫—É—Ä—Å</b>.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –µ—â–µ —É–º–µ—é –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        reply_markup=markup, 
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üìù –ö–æ–Ω–∫—É—Ä—Å")
def register(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, process_name)
    else:
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

def validate_phone(phone):
    return phone.startswith('+') and phone[1:].isdigit() and 10 <= len(phone) <= 15

def process_name(message):
    user_id = message.from_user.id
    name = message.text.strip()
    
    user_data[user_id] = {
        "name": name, 
        "phone": None, 
        "chances": 0, 
        "receipt": None, 
        "approved_receipts": 0
    }
    msg = bot.send_message(message.chat.id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: +79123456789):")
    bot.register_next_step_handler(msg, process_phone)

def process_phone(message):
    user_id = message.from_user.id
    phone = message.text.strip()
    
    if not validate_phone(phone):
        msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(msg, process_phone)
        return
    
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    setting_button = types.KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    markup.add(setting_button)
    user_data[user_id]['phone'] = phone
    bot.send_message(message.chat.id, "üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à —á–µ–∫.", reply_markup=markup)
    waiting_for_receipt[user_id] = True

def notify_moderators(user_id, receipt_file):
    for moderator_id in moderators:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        approve_button = types.KeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å")
        reject_button = types.KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")
        cancel_button = types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")
        markup.add(approve_button, reject_button, cancel_button)

        caption = f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data[user_id]['name']} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
        bot.send_photo(moderator_id, receipt_file, caption=caption, reply_markup=markup)

@bot.message_handler(content_types=['photo'])
def receive_receipt(message):
    user_id = message.from_user.id
    
    if user_id in waiting_for_receipt and waiting_for_receipt[user_id]:
        photo_id = message.photo[-1].file_id
        file_info = bot.get_file(photo_id)
        downloaded_file = bot.download_file(file_info.file_path)

        receipt_file = io.BytesIO(downloaded_file)
        receipt_file.name = f"receipt_{user_id}.jpg" 

        user_data[user_id]['receipt'] = receipt_file 
        notify_moderators(user_id, receipt_file) 
        
        bot.send_message(message.chat.id, "‚úîÔ∏è –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        waiting_for_receipt[user_id] = False
    else:
        if user_id in waiting_for_receipt:
            if not waiting_for_receipt[user_id]:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ–∫. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
            else:
                bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞.")
        else:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —á–µ–∫.")

@bot.message_handler(func=lambda message: message.text in ["‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "üîô –û—Ç–º–µ–Ω–∞"])
def handle_moderation(message):
    moderator_id = message.from_user.id
    
    if moderator_id in moderators:
        try:
            caption = message.reply_to_message.caption
            user_id_str = caption.split("(ID: ")[1].split(")")[0]
            user_id = int(user_id_str)

            if message.text == "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å":
                user_data[user_id]['chances'] += 4
                user_data[user_id]['approved_receipts'] += 1
                bot.send_message(user_id, f"üéâ –í–∞—à —á–µ–∫ –ø—Ä–∏–Ω—è—Ç! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {user_data[user_id]['chances']} —à–∞–Ω—Å–∞(–æ–≤) –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.")
                bot.send_message(moderator_id, f"‚úÖ –ß–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data[user_id]['name']} (ID: {user_id}) –ø—Ä–∏–Ω—è—Ç.")
                
                waiting_for_receipt[user_id] = True

            elif message.text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å":
                bot.send_message(user_id, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à —á–µ–∫ –Ω–µ –ø—Ä–∏–Ω—è—Ç.")
                bot.send_message(moderator_id, f"‚ùå –ß–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data[user_id]['name']} (ID: {user_id}) –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

            elif message.text == "üîô –û—Ç–º–µ–Ω–∞":
                bot.send_message(user_id, "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫–∞.")
                bot.send_message(moderator_id, f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data[user_id]['name']} (ID: {user_id}) –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ–∫–∞.")
                waiting_for_receipt[user_id] = True

        except Exception as e:
            bot.send_message(moderator_id, f"üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üìä –¢–∞–±–ª–∏—Ü–∞")
def export_users(message):
    if message.from_user.id in moderators:
        result = "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
        for user_id, data in user_data.items():
            result += f"üë§ –ò–º—è: {data['name']}, üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}, üéüÔ∏è –®–∞–Ω—Å—ã: {data['chances']}, ‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —á–µ–∫–∏: {data['approved_receipts']}\n"
        bot.send_message(message.chat.id, result)
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(func=lambda message: message.text == "üßæ –ú–æ–∏ —á–µ–∫–∏")
def my_receipts(message):
    user_id = message.from_user.id
    if user_id in user_data:
        approved_count = user_data[user_id]['approved_receipts']
        bot.send_message(message.chat.id, f"üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤: {approved_count}")
    else:
        bot.send_message(message.chat.id, "üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –ö–æ–Ω–∫—É—Ä—Å.")

@bot.message_handler(func=lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    my_receipts_button = types.KeyboardButton("üßæ –ú–æ–∏ —á–µ–∫–∏")
    markup.add(my_receipts_button)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

@bot.message_handler(commands=['grant_moderator'])
def grant_moderator(message):
    moderator_id = message.from_user.id
    
    if moderator_id in moderators:
        try:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –º–æ–¥–µ—Ä–∫–∏:")
            bot.register_next_step_handler(msg, process_grant_moderator)
        except Exception as e:
            bot.send_message(moderator_id, f"üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_grant_moderator(message):
    moderator_id = message.from_user.id
    user_id = message.text.strip()
    
    if user_id.isdigit():
        user_id = int(user_id)
        
        if user_id not in moderators:
            moderators.append(user_id)
            bot.send_message(moderator_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            bot.send_message(user_id, "üéâ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!")
        else:
            bot.send_message(moderator_id, "üö´ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        bot.send_message(moderator_id, "‚ùå –í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

moderators.append(1121163791) 

try:
    bot.polling()
except KeyboardInterrupt:
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

